import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import type { RootState } from ".";
import axios from "axios";
import type { CartItem } from "../types/CartItem";
import type { Cart } from "../types/Cart";

import { getCart, saveCart } from "../utils/cart";

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ ‚Üí –∫–ª–∏–µ–Ω—Ç
const mapServerToClient = (item: Cart): CartItem => {
  const mapped = {
    id: item.id,
    sneakerId: item.sneaker,
    sizeId: item.size.id,   // –∑–¥–µ—Å—å –±–µ—Ä–µ–º –∏–º–µ–Ω–Ω–æ ID —Ä–∞–∑–º–µ—Ä–∞
    quantity: item.quantity,
  };
  console.log("üì• mapServerToClient:", item, "‚Üí", mapped);
  return mapped;
};


// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
export const fetchCart = createAsyncThunk<CartItem[]>(
  "cart/fetch",
  async () => {
    const token = localStorage.getItem("token");

    if (token) {
      console.log("üîÑ [fetchCart] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...");
      const res = await axios.get<Cart[]>("http://localhost:8000/api/cart/", {
        headers: { Authorization: `Token ${token}` },
      });
      console.log("‚úÖ [fetchCart] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", res.data);
      return res.data.map(mapServerToClient);
    } else {
      const localCart = getCart();
      console.log("üóÉÔ∏è [fetchCart] –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage:", localCart);
      return localCart;
    }
  }
);
export const addToCart = createAsyncThunk<CartItem[], CartItem>(
  "cart/addToCart",
  async (cartItem) => {
    const token = localStorage.getItem("token");
    const toServerFormat = (item: CartItem) => ({
      sneaker: item.sneakerId,
      size_id: item.sizeId,
      quantity: item.quantity,
    });

    if (token) {
      const res = await axios.post<Cart>(
        "http://localhost:8000/api/cart/",
        toServerFormat(cartItem),
        { headers: { Authorization: `Token ${token}` } }
      );
      return [mapServerToClient(res.data)];
    } else {
      const cart = getCart();
      const index = cart.findIndex(
        (item) =>
          item.sneakerId === cartItem.sneakerId &&
          item.sizeId === cartItem.sizeId
      );

      if (index >= 0) {
        cart[index].quantity += cartItem.quantity;
      } else {
        cart.push(cartItem);
      }

      saveCart(cart);
      return cart;
    }
  }
);


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
export const updateCartItem = createAsyncThunk<CartItem[], CartItem>(
  "cart/updateCartItem",
  async (cartItem) => {
    const token = localStorage.getItem("token");
    console.log("‚úèÔ∏è [updateCartItem] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", cartItem);

    if (token && cartItem.id !== undefined) {
      const res = await axios.patch<Cart[]>(
        `http://localhost:8000/api/cart/${cartItem.id}/`,
        { quantity: cartItem.quantity },
        {
          headers: { Authorization: `Token ${token}` },
        }
      );
      console.log("‚úÖ [updateCartItem] –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª:", res.data);
      return res.data.map(mapServerToClient);
    } else {
      const cart = getCart();
      const index = cart.findIndex(
        (item) =>
          item.sneakerId === cartItem.sneakerId &&
          item.sizeId === cartItem.sizeId  // –∏–∑–º–µ–Ω–µ–Ω–æ –∑–¥–µ—Å—å
      );
      if (index >= 0) {
        cart[index].quantity = cartItem.quantity;
        console.log("üìù [updateCartItem] –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ:", cart[index]);
        saveCart(cart);
      }
      return cart;
    }
  }
);

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
export const removeCartItem = createAsyncThunk<CartItem[], CartItem>(
  "cart/removeCartItem",
  async (cartItem) => {
    const token = localStorage.getItem("token");
    console.log("üóëÔ∏è [removeCartItem] –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞:", cartItem);

    if (token && cartItem.id !== undefined) {
      const res = await axios.delete<Cart[]>(
        `http://localhost:8000/api/cart/${cartItem.id}/`,
        {
          headers: { Authorization: `Token ${token}` },
          data: {}, // –µ—Å–ª–∏ –±—ç–∫–µ–Ω–¥ —Ç—Ä–µ–±—É–µ—Ç —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        }
      );
      console.log("‚úÖ [removeCartItem] –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª:", res.data);
      return res.data.map(mapServerToClient);
    } else {
      const cart = getCart().filter(
        (item) =>
          !(
            item.sneakerId === cartItem.sneakerId &&
            item.sizeId === cartItem.sizeId  // –∏–∑–º–µ–Ω–µ–Ω–æ –∑–¥–µ—Å—å
          )
      );
      console.log("üßπ [removeCartItem] –£–¥–∞–ª–∏–ª–∏ –∏–∑ localStorage:", cartItem);
      saveCart(cart);
      return cart;
    }
  }
);

// –¢–∏–ø–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
interface CartState {
  items: CartItem[];
  status: "idle" | "loading" | "succeeded" | "failed";
}

const initialState: CartState = {
  items: [],
  status: "idle",
};

// –°–ª–∞–π—Å
const cartSlice = createSlice({
  name: "cart",
  initialState,
  reducers: {
    clearCart: (state) => {
      state.items = [];
      saveCart([]);
      console.log("üßº [clearCart] –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞");
    },
  },
  extraReducers: (builder) => {
  builder
    .addCase(fetchCart.pending, (state) => {
      state.status = "loading";
      console.log("‚è≥ [fetchCart.pending] –ó–∞–≥—Ä—É–∑–∫–∞...");
    })
    .addCase(fetchCart.fulfilled, (state, action) => {
      state.status = "succeeded";
      state.items = action.payload;
      console.log("üéØ [fetchCart.fulfilled] –ó–∞–≥—Ä—É–∂–µ–Ω–æ:", action.payload);
    })
    .addCase(fetchCart.rejected, (state) => {
      state.status = "failed";
      console.error("‚ùå [fetchCart.rejected] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã");
    })

    .addCase(addToCart.fulfilled, (state, action) => {
      // action.payload - –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º, –µ—Å–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞, –∏–ª–∏ –ø–æ–ª–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
      if (Array.isArray(action.payload) && action.payload.length === 1 && action.payload[0].id !== undefined) {
        // —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –ª–∏–±–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ items
        const newItem = action.payload[0];
        const index = state.items.findIndex(
          (item) =>
            item.id === newItem.id
        );
        if (index >= 0) {
          state.items[index] = newItem;
        } else {
          state.items.push(newItem);
        }
      } else {
        // –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
        state.items = action.payload;
      }
      saveCart(state.items);
      console.log("üéØ [addToCart.fulfilled] –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞:", state.items);
    })

    .addCase(updateCartItem.fulfilled, (state, action) => {
      if (Array.isArray(action.payload)) {
        // payload —Å —Å–µ—Ä–≤–µ—Ä–∞ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
        state.items = action.payload;
      } else {
        // –ª–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
        const updatedItem = action.payload as unknown as CartItem; // –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const index = state.items.findIndex(
          (item) =>
            item.sneakerId === updatedItem.sneakerId &&
            item.sizeId === updatedItem.sizeId
        );
        if (index >= 0) {
          state.items[index].quantity = updatedItem.quantity;
        }
      }
      saveCart(state.items);
      console.log("üéØ [updateCartItem.fulfilled] –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", state.items);
    })

    .addCase(removeCartItem.fulfilled, (state, action) => {
      if (Array.isArray(action.payload)) {
        // —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
        state.items = action.payload;
      } else {
        // –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        // action.payload - –Ω–æ–≤—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º
        state.items = action.payload as unknown as CartItem[];
      }
      saveCart(state.items);
      console.log("üéØ [removeCartItem.fulfilled] –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:", state.items);
    });
},

});

// –°–µ–ª–µ–∫—Ç–æ—Ä—ã
export const selectCartItems = (state: RootState) => state.cart.items;

export const selectCartCount = (state: RootState) =>
  state.cart.items.reduce((total, item) => total + item.quantity, 0);

// –≠–∫—Å–ø–æ—Ä—Ç
export const { clearCart } = cartSlice.actions;
export default cartSlice.reducer;
